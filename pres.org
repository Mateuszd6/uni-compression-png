# (local-set-key (kbd "M-m") 'org-beamer-export-to-pdf)

# (local-unset-key (kbd "<S-up>"))
# (local-unset-key (kbd "<S-down>"))
# (local-unset-key (kbd "<S-right>"))
# (local-unset-key (kbd "<S-left"))
# (local-unset-key (kbd "C-y"))

#+TITLE: Format PNG - prezentacja na KD
#+AUTHOR: Mateusz Dudziński
#+EMAIL: mateusz.dudzinski@students.mimuw.edu.pl
#+DATE:      2020-01-18 Thu
#+STARTUP: beamer

# Beamer supports alternate themes.  Choose your favourite here (Madrid)
#+BEAMER_THEME: Szeged
#+OPTIONS:   H:2 toc:1

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

* Wprowadzenie
** Informacje ogólne
*** Bezstratny format kompresji obrazu opracowany pod kątem przesyłania grafiki w internecie.
*** Następca formamtu GIF.
*** Wspiera wiele różnych formatów pikseli - RGB, RGBA, Grayscale, Grayscale + Alpha, 48-bit color.
*** Stosunkowo prosty (jak na format kompresji obrazu).
*** Nie jest i nigdy nie był opatentowany.
** Krótka historia
  - Opracowany w 1995
  - X 1996: Wersja 1.0 - tego czasu format ten jest rekomendowany przez W3C.
  - I 1997: Opublikowany (bez zmian) w dokumencie @@latex:{\color{blue}@@RFC 2083@@latex:}@@.
  - XII 1998: Wersja 1.1 - niewielkie zmiany i trzy nowe bloki (@@latex:{\color{blue}@@iCCP@@latex:}@@, @@latex:{\color{blue}@@sPLT@@latex:}@@, oraz @@latex:{\color{blue}@@sRGB@@latex:}@@).
  - VIII 1999: Wersja 1.2 - dodatkowo jeszcze jeden blok (@@latex:{\color{blue}@@iTXt@@latex:}@@).
  - XI 2003: PNG zostaje standardem ISO (@@latex:{\color{blue}@@ISO/IEC 15948:2004@@latex:}@@) - standard praktycznie nie różni się od wersji 1.2.
  \vspace{0.5cm}
  _Mało_ (istotnych) zmian na przestrzeni lat - to dobry znak.

# RFC: zbiór technicznych dokumentów związanych z
#      Internetem. Dokumenty nie mają mocy oficjalnej, jednak niektóre z
# nich zostały później przekształcone w oficjalne standardy sieciowe,
# np. opis większości popularnych protokołów sieciowych został
# pierwotnie opisany właśnie w RFC.
#
# Problemy patentowe z alg. kompresji GIFa, stworzenie lepszego
# formatu z prosto oddzielajacym się modułem kompresji.
#
# Lepiej:
#   Wsparcie dla truecolor
#   Pełny kanał alpha
#   Lepsze wspracie w wykrywaniu błędów transmisji
#   Zupełna rozłącznośc modułu kompresji - nowe algorytmy?
# Gorzej:
#   Brak animacji
#
#   GIF - dziwna historia patentowa.
#   TIFF - skomplikowany.
#   IFF - Ogólnie dobry pomysł, trochę technicznych detali.
#   Lossless JPEG - Brak indexed-color i PNG jest lepsze pod względem kompresji.

** Główne założenia
*** Prostota i przenośność
    Jedyny algorytm kompresji zastosowany w tym formacie to populary
    do dzisiaj DEFLATE, będący też główym algorytmem kompresowania
    danych w programie gzip (zip), który posiada bardzo wiele
    wspierających bibliotek. Przez co dekodowanie obrazów PNG nie jest
    trudne.

*** ... nawet kosztem kompresji danych
    DEFLATE jest uniwersalnym algorytmem kompresji, radzącym sobie, w
    założeniu, "z każdego rodzaju danymi". Czy to znaczy, że PNG nie w
    prawie żaden sposób zoptymalizowane pod kątem kompresji obrazów?

** Główne założenia
*** Niewiele lepszy niż zwykły obraz skompresowany zip'em
    Przy "standardowych" obrazkach, zwykle PNG daje nieznacznie lepszy
    wynik niż po prostu stworzenie archiwum .zip z tym jedym obrazem
    jako bitmapą. Odpowiedzialne jest za to użycie w PNG transformat
    na obrazie zanim wykoda się na nim DEFLATE'a.

*** Ale ma też inne zalety
    + Wiele różnych formatów kolorów (w tym indeksowany z palety)
    + Możliwość dodania wielu matadatych (tekst, czas modyfikacji obrazu, fizyczne wymiary)
    + Możliwość dodawania własnych metadanych prez "rozszerzanie"
      formatu, które jest tak zaprojektowane, żeby standardowe
      dekodery ciągle mogły rozczytać obraz.

** Stopień kompresji
  Skuteczność kompresji zależy przede wszystkim od tego, ile czasu
  damy koderowi na kompresowanie pliku. Większość programów pozwala
  użytkownikowi wybrać poziom kompresji pliku - im wyższy tym więcej
  czasu zajmie kompresowanie
 (poziomy 0-9).
#+ATTR_LATEX: :width 4cm
[[./images/slides1.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1080
  * Różnica: 8.31Mb / 2.98Mb (2.79)
#+ATTR_LATEX: :width 9cm
[[./images/test1.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1080
  * Różnica: 6.94Mb / 2.66Mb (2.61)
#+ATTR_LATEX: :width 9cm
[[./images/test2.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 2000 x 1240
  * Różnica: 7.47Mb / 2.43Mb (3.07)
#+ATTR_LATEX: :width 9cm
[[./images/test3.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1200
  * Różnica: 6.92Mb / 1.09Mb (6.35)
#+ATTR_LATEX: :width 7.5cm
[[./images/test4.png]]
  * Bardzo długi czas kompresowania obrazu.

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1200
  * Różnica: 6.92Mb / 1.34Mb (5.16)
#+ATTR_LATEX: :width 7.5cm
[[./images/test5.png]]
  * Również bardzo długi czas kompresowania obrazu.

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1200
  * Różnica: 6.92Mb / 1.38Mb (5.01)
#+ATTR_LATEX: :width 7.5cm
[[./images/test6.png]]
  * Również bardzo długi czas kompresowania obrazu.

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1080
  * Różnica: 6.23Mb / 6.6Kb (943.94)
#+ATTR_LATEX: :width 9cm
[[./images/test10.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1080
  * Różnica: 8.31Mb / 7.14Mb (1.16)
#+ATTR_LATEX: :width 9cm
[[./images/test7.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1080
  * Różnica: 8.31Mb / 7.01Mb (1.18)
#+ATTR_LATEX: :width 9cm
[[./images/test9.png]]

** Skuteczność dla różnych obrazów.
  * Rozmiar: 1920 x 1080
  * Różnica: 8.31Mb / 6.56Mb (1.27)
#+ATTR_LATEX: :width 9cm
[[./images/test8.png]]


* Stuktura pliku
** Stuktura pliku - nagłówek
*** Pierwsze 8 bajtów są zawsze takie same i służą do rozpoznania czy format pliku to PNG.
  \vspace{3cm}

#+ATTR_LATEX:
[[./images/slides2.png]]

** Stuktura pliku - bloki
*** Reszta dokumentu składa się z bloków

| [długość] | [rodzaj bloku] | [zawartość]      | [suma CRC] |
| 4 bajty   | 4 bajty        | [długość] bajtów | 4 bajty    |
# \vspace{3cm}

  * Zawartość może mieć długość 0.
  * Suma CRC jest liczona z rodzaju bloku i zawartości, bez długości.

$\>$ $\>$  ~tEXt~ \\
$\>$ $\>$  ~||||- "Safe to copy"~ \\
$\>$ $\>$  ~|||-- (Standard wymaga wielkiej litery)~ \\
$\>$ $\>$  ~||--- "Public (Standard conforming)"~ \\
$\>$ $\>$  ~|---- "Not critical"~ \\

# GOOD NOTES:
#
# If a chunk's safe-to-copy bit is 0, it indicates that the chunk depends on the
# image data. This information is not important for decoders, only for encoders.
#
# A hypothetical chunk for vector graphics would be a critical chunk, since if
# ignored, important parts of the intended image would be missing.  A chunk
# carrying the Mandelbrot set coordinates for a fractal image would be
# ancillary, since other applications could display the image without
# understanding what the image represents.  In general, a chunk type should be
# made critical only if it is impossible to display a reasonable representation
# of the intended image without interpreting that chunk.

** Stuktura pliku - bloki - przykład
#+ATTR_LATEX:
[[./images/slides3.png]]

** Stuktura pliku - bloki - IHDR
*** Musi wystąpić jako pierwszy blok, zaraz po nagłówku. Zawiera ogólne informacje o obrazie.
 - Szerokość: 4B
 - Wysokość: 4B
 - Bity na pixel (depth): 1B
 - Colortype: 1B (Grayscale, Grayscale + A, RGB, RGBA, Indeksowany)
 - Metoda kompresji: 1B (Standard: tylko 0)
 - Metoda filtrowania: 1B (Standard: tylko 0)
 - Typ przeplotu (Interlace): 1B (Standard: tylko 0 (brak) i 1 (Adam7))

** Stuktura pliku - bloki - PLTE
*** Dla obrazów typu indexed color, wartości 'pixeli' to indeksy do tablicy zawierającej dokładne informacje o kolorze.
 - Występuje przed zawartością obrazu po @@latex:{\color{blue}@@IHDR@@latex:}@@.
 - *MUSI* wystąpić jeżeli poprzedni blok definiował /Colortype/ jako /Indeksowany/.
 - Może też wystąpić dla RGB i RGBA.
 - Zawiera informacje o odwzorowaniu zawartości obrazu na rzeczywiste kolory (służy jako paleta kolorów).
 - Rzadko spotykana (blok @@latex:{\color{blue}@@sPLT@@latex:}@@).
 - Nie trzeba wysyłać całej: zwykle zmieniane są tylko małe
   wartości. W pliku wysyła się tablicę wartości od 0 do 3N gdzie 3N
   jest zdeterminowane przed długość bloku.

** Stuktura pliku - bloki - IEND
 - Musi wystąpić jako ostatni blok.
 - Oznacza koniec pliku PNG.

** Stuktura pliku - bloki - IDAT
 - Najważniejszy blok. Zawiera (potencjalnie skompresowaną) zawartość obrazu.
 - Szczegóły za chwilę.

** Stuktura pliku - pozostałe (niekrytyczne) bloki
 - @@latex:{\color{blue}@@bKGD@@latex:}@@ - Kolor tła.
 - @@latex:{\color{blue}@@cHRM@@latex:}@@ - Definicja barw względem przestrzeni CIEXYZ (CIE1931).
 - @@latex:{\color{blue}@@gAMA@@latex:}@@ - Gamma obrazu.
 - @@latex:{\color{blue}@@hIST@@latex:}@@ - Opisuje częstotliwość użycia poszczególnych kolorów z
   palety. Przydatny kiedy dekodujący nie ma aż tyle kolorów ile jest
   opisane w palecie.
 - @@latex:{\color{blue}@@tEXt@@latex:}@@ - dane tekstowe w postaci "klucz - wartość". Klucz do 70
   bajtów, wartość dowolna. Kilka predefiniowanych kluczy /"Author"/,
   /"Comment"/, itd.
 - @@latex:{\color{blue}@@zTXt@@latex:}@@ - jak wyżej, ale wartość jest poddawana kompresji, dokładnie
   tym samym algorytmem co zawartość obrazu.

** Stuktura pliku - pozostałe (niekrytyczne) bloki
 - @@latex:{\color{blue}@@pHYs@@latex:}@@ - Fizyczne wymiary obrazu. Ilość pikseli na jednostkę w osi X
   i Y.
 - @@latex:{\color{blue}@@tIME@@latex:}@@ - Ostatni czas zmiany zawartości obrazu.
 - @@latex:{\color{blue}@@tRNS@@latex:}@@ - Opis kanału alfa dla całego obrazu - nie dotyczy wersji
   /RGBA/ i /Grayscale + A/.

* Kompresja
** Kompresja w PNG - schmat
#+ATTR_LATEX: :width 10cm
[[./images/slides6.png]]

** Filtry (przekształcenie)
*** "Filtry" to nazwa stosowana w specyfikacji. Ale wszystkie filtry są bezstratne (dlatego zamiennie będę używał określenia "przekształcenie")
*** Metoda przekszałcania zdefiniowana na początku pliku w @@latex:{\color{blue}@@IHDR@@latex:}@@.
*** Póki jest tylko standard definiuje tylko jedną metodę (0).
*** Modyfikują poszczególne składowe /pixeli/, co czyni je nieco bardziej skomplikowanymi w implementacji, ale znacznie bardziej skutecznymi. Wartość w kolorze czerwonym oznacza różnice kanałów czerwonych itd.
*** Nie kompresujemy danych, tylko je rozdymamy.
# Nie kompresujemy danych, tylko je rozdymamy. To samo co robiliśmy w
# algorytmie transformaty Burrowsa-Wheelera (puszczając potem
# MTF). Idea jest taka sama - zamieniamy dużo równomiernie
# występujących wartości, tak, żeby było możliwie dużo małych i mało
# dużych. A potem dopiero puszczamy DEFLATE, który używa kodów
# Huffmana, więc bardzo dobrze sobie z tym poradzi. Tu jednak dodajemy
# jeden bajt do każdego wiersza obrazka. Może się to wydawać całkeim
# sporo...

** Filtry (przekształcenie)
*** Każdy wiersz obrazu (/scanline/) posiada osobne przekształcenie.
*** Jak wybrać optymalny filtr? Tak, żeby algorytm DEFLATE działał najskuteczniej!
    + Chcemy jak najwięcej powtarzających się fragmentów (bo \texttt{LZ77}
      pozwala "kopiować" takie fragmenty)
    + Chcemy używać jak najwięcej tych samych znaków (bo DEFLATE używa
      kodów Huffmana).
    + O DEFLATE za chwilę.
    + Prosta, ale bardzo skuteczna i stosowana w praktyce heurystyka: liczymy
      dla każdego filtra sumę wszystkich wartości w wierszu i wybieramy ten,
      który daje najmniejszą sumę.

** Filtry - Metoda 0 (jedyna zdefiniowana przez standard)
*** 5 różnych typów. Każdy wiersz (/scanline/) może mieć inny.
*** Typ przekształcenia zajmuje jeden bajt (od 0 do 4) i jest doklejony na początku każdego wiersza.
*** Zwiększa to dane które kompresujemy, ale nie drastycznie (około 1 promil dla "standardowych" obrazków 1200x1080).

** Filtry - Metoda 0 (jedyna zdefiniowana przez standard)
*** Col left                                                          :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.50
    :END:

#+ATTR_LATEX:
[[./images/slides8.png]]

   + $\texttt{pixel} = x$
   + $\texttt{pixel} = x - a$
   + $\texttt{pixel} = x - b$
   + $\texttt{pixel} = x - \lfloor \frac{a + b}{2} \rfloor$
   + $\texttt{pixel} = x - \texttt{Paeth}(a, b, c)$

   \vspace{15pt}
   \footnotesize Funckja \texttt{Peath} próbuje ustalić w którym z trzech kierunków gradient obrazu jest najmniejszy.

*** Col right                                                         :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.60
   :END:

   @@latex:{\color{blue}@@\texttt{function}@@latex:}@@ \texttt{Peath(a, b, c) = } \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{let}@@latex:}@@ \texttt{p = a + b - c;} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{let}@@latex:}@@ \texttt{pa = abs(p - a);} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{let}@@latex:}@@ \texttt{pb = abs(p - b);} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{let}@@latex:}@@ \texttt{pc = abs(p - c);} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{if}@@latex:}@@ \texttt{pa <= pb} @@latex:{\color{blue}@@\texttt{and}@@latex:}@@ \texttt{pa <= pc} \\
   \hspace{30pt}  \texttt{Pr = a;} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{else if}@@latex:}@@ \texttt{pb <= pc} \\
   \hspace{30pt}  \texttt{Pr = b;} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{else}@@latex:}@@ \\
   \hspace{30pt}  \texttt{Pr = c;} \\
   \hspace{15pt} @@latex:{\color{blue}@@\texttt{return}@@latex:}@@ \texttt{Pr;}

** Kompresja w PNG - schemat
*** Podobnie jak w filtrach, tylko metoda 0 jest zdefiniowana przez standard - oznacza użycie algorytmu DELFATE i /zlib/ jako formatu bloku.

** Kompresja w PNG - schemat
#+ATTR_LATEX: :width 7cm
[[./images/slides4.png]]

** ZLIB
*** Abstrachuje dane generowane przez DEFLATE, dodając nagłówki i sumy kontrolne tworząc format danych o nazwe tej samej co biblioteka.
*** Bardzo skuteczna biblioteka implmentująca ten format danych, używana powszechnie w przemyśle.
    m.in: Linux, GNU Binutils, GDB, libpng, libwww, wszystkie
    przeglądarki, cURL, Apache HTTPD, OpenSSH, OpenSSL, FFmpeg, rsync,
    dpkg, RPM, SVN, CVS, git, PostgreSQL, .NET Framework >= 2.0,
    iPhone, Sony PlayStation, ...
# Definiuje format danych (o tej samej nazwie co biblioteka)
# abstrachujący format algorytmu DEFLATE, którzego używa. Dodaje
# nagłówki i sumy kontrolne Adler32. Wydevelopowana w 1995 była
# przeznaczona do użycia z biblioteką graficzną libpng. Używana nie
# tylko w PNG ale i w zip'ie (gzip). Znaczy że algorytm kompresji jest
# całkiem generyczny (radzi sobie równie dobrze z pikselami obrazu jak
# i z tekstem) De facto standard.

** ZLIB - Format danych
| Cały blok:                                     |                                                |                                                   |           |              |
|------------------------------------------------+------------------------------------------------+---------------------------------------------------+-----------+--------------|
| [1 B]                                          | [1 B]                                          | [0/4 B]                                           | [?]       | [4 B]        |
| @@latex:{\color{blue}@@\texttt{CMF}@@latex:}@@ | @@latex:{\color{blue}@@\texttt{FLG}@@latex:}@@ | @@latex:{\color{blue}@@\texttt{DICTID}@@latex:}@@ | Zawartość | Suma Adler32 |

*** Col left                                                          :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

\vspace{-13pt}
| @@latex:{\color{blue}@@\texttt{CMF:}@@latex:}@@ |                                                  |
|-------------------------------------------------+--------------------------------------------------|
| [0-3]                                           | [4-7]                                            |
| @@latex:{\color{blue}@@\texttt{CM}@@latex:}@@   | @@latex:{\color{blue}@@\texttt{CINFO}@@latex:}@@ |

*** Col right                                                         :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

\vspace{-13pt}
| @@latex:{\color{blue}@@\texttt{FLG:}@@latex:}@@   |                                                  |                                                   |
|---------------------------------------------------+--------------------------------------------------+---------------------------------------------------|
| [0-4]                                             | [5]                                              | [6-7]                                             |
| @@latex:{\color{blue}@@\texttt{FCHECK}@@latex:}@@ | @@latex:{\color{blue}@@\texttt{FDICT}@@latex:}@@ | @@latex:{\color{blue}@@\texttt{FLEVEL}@@latex:}@@ |

***  
+ @@latex:{\color{blue}@@\texttt{CM}@@latex:}@@ - (Compression method), zdefiniowany tylko 8 - DEFLATE.
+ @@latex:{\color{blue}@@\texttt{CINFO}@@latex:}@@ - $log_2$ z rozmiaru okna \texttt{LZ77}, wymanane \leq 7.
+ @@latex:{\color{blue}@@\texttt{FCHECK}@@latex:}@@ - taka liczba, że: $31 | (\texttt{CMF}*256 + \texttt{FLG})$
+ @@latex:{\color{blue}@@\texttt{FDICT}@@latex:}@@ - Czy użyty został słownik? (Czy @@latex:{\color{blue}@@\texttt{DICTID}@@latex:}@@ obecny).
+ @@latex:{\color{blue}@@\texttt{FLEVEL}@@latex:}@@ - Informacja, jak bardzo encoder próbował skompresować plik.

** DEFLATE
*** Dwie metody kompresji, stosowane jedna po drugiej:
    + LZ77 (Abrahama Lempel, Jacob Ziv, 1977)
    + Kody Huffmana (David A. Huffman, 1952)

    + Strumień może być dowolnie podzielony na bloki. Każdy blok może
      mieć oddzielnie zdefiniowane drzewo kodów prefiksowych.
    + Istnieje możliwość nie kompresowania bloku (koder może uznać, że
      jakaś część pliku jest niekompresowalna, wydzielić na nią osobny
      blok i zostawić w niezmienionej formie).

*** Od tej pory pobieramy ze strumienia już praktycznie tylko pojedyńcze bity.

** LZ77
    + Metoda szukania powtórzonych już ciągów w strumieniu danych. W
      alfabecie oprócz literałów (naszym przypadku literały to
      wartości pixeli $\in [0; 255]$), dodajemy jeszcze parę $<A; B>$,
      oznaczającą powtórzenie $B$ znaków zaczynając od pozycji $A$
      pozycji przed kursorem.
    + Okno kompresji na początku jest puste. Enkoder pisze do niego
      bajty, dokładnie takie, jakie zobaczy dekoder. Referencja do
      poprzedniego ciągu może wystąpić tylko w obrębie tego okna
      (zwykle 32k), DEFLATE nie pozwala na więcej.
    + Zwykle na początku kompresji okno jest
      puste. @@latex:{\color{blue}@@\texttt{DICTID}@@latex:}@@ w
      nagłówku \texttt{zlib} pozwala się umówić koderowi i dekoderowi
      na początkowy stan tego okna.
    + Potencjalnie gorsze od RLE dla bardzo specyficznych danych
      ($\mathcal{O}(log{2}n)$ vs $\mathcal{O}(1)$)? Jak się zaraz
      okaże, niekoniecznie!

** LZ77 - przykład
#+ATTR_LATEX:
[[./images/slides9.png]]
Wynik: @@latex:{\color{red}@@\texttt{... A A A A C C A B }@@latex:}@@

** LZ77 - przykład
#+ATTR_LATEX:
[[./images/slides10.png]]
Wynik: @@latex:{\color{red}@@\texttt{... A A A A C C A B }@@latex:}@@

** LZ77 - przykład
#+ATTR_LATEX:
[[./images/slides11.png]]
Wynik: @@latex:{\color{red}@@\texttt{... A A A A C C A B <6;3> }@@latex:}@@

** LZ77 - porównanie z RLE
*** Najprostsze RLE:
    4M2a3t2e1u1s2z \rightarrow MMMMaattteeuszz \\
    5184000\0 \rightarrow 1200 \times 1080 pikseli o
    wartości 0 (czarny obraz) \\

*** Wydaje się, że PNG jest istotnie gorsze w tym przypadku, bo potrzebuje 6.6KB na taki obraz.
    Możemy wyprodukować wykładniczo rosnące ciągi przy użyciu LZ: \texttt{0 }@@latex:{\color{OliveGreen}@@\texttt{<1; 1> <2; 2> <4; 4> <8; 8> ...}@@latex:}@@ \\

*** Ale zlib pozwala nam zakodować to lepiej!

** LZ77 - porównanie z RLE
*** Ale zlib pozwala nam zakodować to lepiej!
#+ATTR_LATEX:
[[./images/slides12.png]]

** LZ77 - porównanie z RLE
*** Ale zlib pozwala nam zakodować to lepiej!
#+ATTR_LATEX:
[[./images/slides13.png]]

** LZ77 - porównanie z RLE
*** Ale zlib pozwala nam zakodować to lepiej!
#+ATTR_LATEX:
[[./images/slides14.png]]

** LZ77 - porównanie z RLE
*** Ale zlib pozwala nam zakodować to lepiej!
#+ATTR_LATEX:
[[./images/slides15.png]]

** LZ77 - porównanie z RLE
*** Ale zlib pozwala nam zakodować to lepiej!
#+ATTR_LATEX:
[[./images/slides16.png]]

** LZ77 - porównanie z RLE
*** Czyli możemy zakodować w $\mathcal{O}(1)$ powtórzenie dowolnie wiele razy jednego znaku.
*** No to dlaczego potrzebujemy 6.6KB na taki prosty obraz?
    + Bo deflate przeznacza bardzo niewiele bitów na długość podciągu
      który kopiujemy - możemy maksymalnie skopiować 258 znaków.
    + A to dlatego, że na liczbę mówiącą ile należy się cofnąć, jest
      przeznaczona stała liczba bitów!

** LZ77 - jak zapisywać literały oznaczające skok?
*** Jaki wogóle mamy alfabet?
    + Znak z $[0; 255]$ - bajt o takiej wartości, $256$ - koniec.
    + Znak z $[257; 285]$  - skopiowanie ciągu który już się pojawił.
    + Wartości $\in [257; 285]$ mówią nam, że będziey kopiować i definiują ile
      bajtów skopiujemy (zaraz zobaczymy jak). Jak będziemy wiedzieć _skąd_
      kopiować? Użyjemy do tego drugiego alfabetu.
    + Drugi alfabet będzie nam mówił ile musimy się cofnąć.
    + W obu przypadkach bo znaku następują dodatkowe bity podające
      informacje. Np. '277' oznacza kopiowanie od 67 do 82 bitów. A
      następne 4 bity mówią nam dokałdnie ile musimy dodać do 67.


** Jak DEFLATE koduje skok LZ?
*** Pierwszy element z pary wyznacza ilość kopiowanych bajtów. Po nim mogą nastąpić dodatkowe bity.
#+LATEX: {\tiny
| Wart. | Nast. | Kopiuj |   |   | Wart. | Nast. | Kopiuj |   |   | Wart. | Nast. |  Kopiuj |
|-------+-------+--------+---+---+-------+-------+--------+---+---+-------+-------+---------|
|   257 |     0 |      3 |   |   |   267 |     1 |  15-16 |   |   |   277 |     4 |   67-82 |
|   258 |     0 |      4 |   |   |   268 |     1 |  17-18 |   |   |   278 |     4 |   83-98 |
|   259 |     0 |      5 |   |   |   269 |     2 |  19-22 |   |   |   279 |     4 |  99-114 |
|   260 |     0 |      6 |   |   |   270 |     2 |  23-26 |   |   |   280 |     4 | 115-130 |
|   261 |     0 |      7 |   |   |   271 |     2 |  27-30 |   |   |   281 |     5 | 131-162 |
|   262 |     0 |      8 |   |   |   272 |     2 |  31-34 |   |   |   282 |     5 | 163-194 |
|   263 |     0 |      9 |   |   |   273 |     3 |  35-42 |   |   |   283 |     5 | 195-226 |
|   264 |     0 |     10 |   |   |   274 |     3 |  43-50 |   |   |   284 |     5 | 227-257 |
|   265 |     1 |  11-12 |   |   |   275 |     3 |  51-58 |   |   |   285 |     0 |     258 |
|   266 |     1 |  13-14 |   |   |   276 |     3 |  59-66 |   |   |       |       |         |
#+LATEX: }

** Jak DEFLATE koduje skok LZ?
*** Na indeks z którego kopiujemy mamy 5 bitów + ew. dodatkowe bity.
#+LATEX: {\tiny
| Wart. | Nast. | Cofnij |   |   | Wart. | Nast. |   Cofnij |   |   | Wart. | Nast. |      Cofnij |
|-------+-------+--------+---+---+-------+-------+----------+---+---+-------+-------+-------------|
|     0 |     0 |      1 |   |   |    10 |     4 |    33-48 |   |   |    20 |     9 |   1025-1536 |
|     1 |     0 |      2 |   |   |    11 |     4 |    49-64 |   |   |    21 |     9 |   1537-2048 |
|     2 |     0 |      3 |   |   |    12 |     5 |    65-96 |   |   |    22 |    10 |   2049-3072 |
|     3 |     0 |      4 |   |   |    13 |     5 |   97-128 |   |   |    23 |    10 |   3073-4096 |
|     4 |     1 |    5-6 |   |   |    14 |     6 |  129-192 |   |   |    24 |    11 |   4097-6144 |
|     5 |     1 |    7-8 |   |   |    15 |     6 |  193-256 |   |   |    25 |    11 |   6145-8192 |
|     6 |     2 |   9-12 |   |   |    16 |     7 |  257-384 |   |   |    26 |    12 |  8193-12288 |
|     7 |     2 |  13-16 |   |   |    17 |     7 |  385-512 |   |   |    27 |    12 | 12289-16384 |
|     8 |     3 |  17-24 |   |   |    18 |     8 |  513-768 |   |   |    28 |    13 | 16385-24576 |
|     9 |     3 |  25-32 |   |   |    19 |     8 | 769-1024 |   |   |    29 |    13 | 24577-32768 |
#+LATEX: }

** Jak DEFLATE koduje skok LZ?
*** Przykład:
    @@latex:{\color{black}@@\texttt{1 0 0 0 0 1 1 1 0}@@latex:}@@
    @@latex:{\color{red}@@\texttt{1 0}@@latex:}@@
    @@latex:{\color{black}@@\texttt{1 0 1 0}@@latex:}@@
    @@latex:{\color{blue}@@\texttt{0 1 0 1}@@latex:}@@

    + Ile kopiujemy?
     100001110_{2} = 270_{10} \\
     $T_{1}(270)$ = $(2, 23)$ (czytamy $2$ bity i dodajemy do $23$) \\
     @@latex:{\color{red}@@10_{2}@@latex:}@@ = @@latex:{\color{red}@@2_{10}@@latex:}@@ \\
     Czyli kopiujemy 23 + @@latex:{\color{red}@@2@@latex:}@@ = 25.

    + Skąd kopiujemy?
      1010_{2} = 10_{10} \\
      $T_{2}(10)$ = $(4, 33)$ (czytamy $4$ bity i dodajemy do $33$) \\
      @@latex:{\color{blue}@@0101_{2}@@latex:}@@ = @@latex:{\color{blue}@@5_{10}@@latex:}@@ \\
      Czyli kopiujemy z pozycji 33 + @@latex:{\color{blue}@@5@@latex:}@@ = 38 bajtów wstecz.

*** Zatem zakodowany skok to $<25; 38>$.

** Podsumowanie tej części:
   + Nasz ciąg skompresowanych danych składa się teraz z wartości bajtowych
     $B = [0; 255]$ oraz z (koncepcyjnie) par $<A; \Delta>$ oznaczających
     kopoiowanie $A$ bajtów z pozycji $B$ bajtów za obecny indeksem.
   + Wartości bajtowe z \Beta i wartości z $A$ łączymy w jeden alfabet $\Sigma =
     [0;258]$. Na odległości mamy drugi alfabet: $\Delta = [0; 31]$. Po
     niektórych wartościach związanymi z kopiowaniem LZ mogą nastąpić dodatkowe
     bity, ale będziemy wiedzieć ile ich jest (literał nam to wyznacza).

** Kodowanie Huffmana
   + Każde słowo z alfabetu \Sigma zastępujemy ciągiem bitowym
     odwrotnie proporcjonalnym do pradopodobieństwa jego wystąpienia.
   + Inaczej, chcemy żeby najczęsciej występujące elementy były
     reprezentowane przez jak najkrótsze ciągi bitów.
   + Minimalizujemy: $\sum_{i \in \Sigma} (p_{i} * |H(i)|)$, gdzie
     $H(i)$ to ciąg bitów jaki przypisujemy słowu $i$.

** Kodowanie Huffmana
   + Kody wyrazów z naszego alfabetu reprezentujemy przez drzewo
     binarne (drzewo Huffmana).

#+ATTR_LATEX: :width 6cm
[[./images/slides18.png]]

**** Takie drzewo daje nam wszystkie informacje niezbędne do dekodowania:
     \texttt{1 0 0 1 1 0 0 0 1 0 0 0 1 0 1 1} \rightarrow \txettt{B A B B A D A B C} \\
     \texttt{+ +++ + + +++ +++++ +++ + +++++}

** Kodowanie Huffmana
*** Col left                                                          :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

   + Jak konstruować takie drzewo?
     - Oczywiście, zachłannie.
     - Używając kolejki priorytetowej można szukać najmniejszego
       poddrzewa w czasie $\Theta(n log n)$. Drzewo o $n$ liściach ma
       $2n - 1$ węzły, więc cały algorytm można wykonać w czasie
       $\Theta(n log n)$.

*** Col right                                                         :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

#+ATTR_LATEX: :width 3.5cm
#+CAPTION: en.wikipedia.org
[[./images/slides20.png]]

** Kodowanie Huffmana
   + Wysłanie całego drzewa (np. podając korzeń i wszystkie
     krawędzie), jest nieakceptowalne, bo zawiera za dużo pamięci.
   + DEFLATE radzi sobie inaczej:
     * Dla każdej długości $N$, kody mają kolejne wartości (w sensie
       leksykograficznym).
     * Krótsze kody poprzedzają leksykograficznie dłuższe.
   + Drzewo z poprzedniego przykładu wyglądałoby tak:

#+ATTR_LATEX: :width 6cm
[[./images/slides17.png]]

** Dzięki temu dekoder może wygenerować drzewo Huffmana na podstawie tylko i wyłącznie informacji o długości kodów dla poszczególnych znaków.
   + Algorytm wygląda tak:
     1. Niech blcount[N] oznacza liczbę kodów o długości N, N >= 1.

** Dzięki temu dekoder może wygenerować drzewo Huffmana na podstawie tylko i wyłącznie informacji o długości kodów dla poszczególnych znaków.
   + Algorytm wygląda tak:
     1. Niech blcount[N] oznacza liczbę kodów o długości N, N >= 1.
     2. Znajdź wartość najmniejszego leksykograficznie kodu dla każdej długości:
#+BEGIN_SRC C++
        code = 0;
        blcount[0] = 0;
        for (bits = 1; bits <= MAX_BITS; bits++) {
            code = (code + blcount[bits-1]) << 1;
            next[bits] = code;
        }
#+END_SRC

** Dzięki temu dekoder może wygenerować drzewo Huffmana na podstawie tylko i wyłącznie informacji o długości kodów dla poszczególnych znaków.
   + Algorytm wygląda tak:
     1. Niech blcount[N] oznacza liczbę kodów o długości N, N >= 1.
     2. Znajdź wartość najmniejszego leksykograficznie kodu dla każdej długości.
     3. Kolejnym znakom przypisz leksykograficzne kolejne wartości ciągów:
#+BEGIN_SRC C++
        for (n = 0; n <= MAX_CODE; n++) {
            len = input[n]; // długość ciągu dla znaku n;
            if (len <> 0) { huffman[n] = next[len]; next[len]++; }
        }
#+END_SRC

** Dzięki temu dekoder może wygenerować drzewo Huffmana na podstawie tylko i wyłącznie informacji o długości kodów dla poszczególnych znaków.
   + Załóżmy że mamy alfabet $\Sigma = \{A, B, C, D, E, F, G, H\}$ i
     że drzewo jest kodowane przez ciąg (3, 3, 3, 3, 3, 2, 4, 4),
     tzn. A ma kod długości 3, B długości 3, ... , F długości 2, ...
     1. \texttt{blcount[N] = [0, 0, 1, 5, 2]}
     2. \texttt{next[N] = [0, 0, 0, 2, 14]}
     3. \texttt{output[i] = [2, 3, 4, 5, 6, 0, 14, 15] = [010, 011, 100, 101, 110, 00, 1110, 1111]}

** Zdekodowane drzewo
#+ATTR_LATEX:
[[./images/slides19.png]]

** Jeszcze większa kompresja drzwa Huffmana
  + Ciąg takich długości, choć istotnie mniejszy niż wymienianie
    wszystkich krawędzi, ciągle jest bardzo duży.
  + Szczególnie, że na jedną liczbę musielibyśmy przeznaczyć cały bajt
    (albo nawet dwa bajty).
  + Ponieważ mamy dwa alfabety, jeśli jeden z nich będzie bardzo mały
    (potencjalnie zerowy), to nie chcemy marnować dużo bitów na długości kodów
    Huffmana.
  + Zamiast podawać po kolei długości wszystkich kodów zdefiniujmy
    alfabet, który pozwoli nam wyrazić to samo, ale krócej.


** Alfabet dla długości kodów jest następujący:
   + 0-15: Kod długości $[0; 15]$.
   + 16: Skopiuj poprzednią długość $(3 + k) \in [3; 6]$ razy.
         Dwa następne bity wyznaczją $k$.
   + 17: Powtórz kod długości $0$, $(3 + k) \in [3; 10]$ razy.
         3 następne bity wyznaczją $k$.
   + 18: Powtórz kod długości $0$, $(11 + k) \in [11; 138]$ razy.
         7 następnych bitów wyznacza $k$.

**** Przykład:
     \texttt{1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 1 0} \rightarrow \texttt{8 16 3 16 2} \\
     \texttt{+++++++ +++++++++ +++ +++++++++ +++} \\
     \\
     \hspace{10pt} \rightarrow \txettt{8 8 8 8 8 8 8 8 8 8 8 8} \\


** _Ten_ alfabet możemy skompresować kodami Huffmana!
   + Na początku bloku wysyłamy długości kodów dla tego alfabetu $\Sigma_{2} =
     \{0, 1, ..., 18\}$.
   + Ale nawet to można ulepszyć. Jest szansa, że nie użyjemy wszystkich liter
     alfabetu. Więc najpierw wysyłamy 4 bitową informację, dla ilu znaków z
     \Sigma_{2} podejemy długości kodów. Następnie podajemy te długości.
   + W jakiej kolejności? Po kolei? $(0, 1, 2, 3, ...)$
   + Nie: \texttt{16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}
   + Przez to, jeżeli elementy alfabetu, jakich potrzebujemy to $0, 5, 6, 7, 8,
     16, 17, 18$. Możemy wysłać tylko pierwsze 8 liczb zamiast 16.

** Definicja drzewa i tak zajumie dużo miejsca.
   + Co jeśli mamy na tyle dużo danych, że chcemy je skompresować, ale na tyle
     mało, że definicja tablicy Huffmana zajmuje duży fragemnt kompresowanych
     danych?
   + Istnieje możeliwość zakodowania za pomocą z góry ustalonego drzewa
     Huffmana: na początku bloku DEFLATE jest bit oznaczający że takie drzewo
     jest użyte. Wtedy definicja drzewa nie następuje. DEFLATE definiuje takie
     "domyślne" drzewo.
   + Nie jest to kodowanie optymalne, ale możemy odzystać stracone miejsce
     oszczędzając na pamięci nie wysyłając drzewa Huffmana, które choć bardzo
     skompresowane, ciągle zajmuje niemało miejsca.

** Ustalona tablica Huffmana:

| Znak      | Bity |            Wartości |
|-----------+------+---------------------|
| 0 - 143   |    8 |   00110000-10111111 |
| 144 - 255 |    9 | 110010000-111111111 |
| 256 - 279 |    7 |     0000000-0010111 |
| 280 - 287 |    8 |   11000000-11000111 |

Wartości elementów alfabetu definiującego nawroty $[0; 31]$ są wszystkie
reprezentowane przez 5-cio bitowe kody (w kolejności leksykograficznej).

** Jeżeli koder uzna, że dane i tak są niekompresowalne, może zostawić dane bez kompresji.
   Większość programów zapisujących obrazy w formacie PNG zrobi tak, dla poziomu
   kompresji 0. Takie obrazy mogą jednak ważyć /więcej/ niż zwykła bitmapa, bo
   choć DEFLATE pozostawia dane bez kompresji, filtry zostały zastosowane (PNG
   nie pozwala na zapisanie obrazu bez filtrów), więc dane są rozdymane.


** Przykład dekodowania (static Huffman):
   \texttt{00110001 00110000 00110001 00110002 00110004 00110002 00110003 00110002 00110004 00110003 00110002 00110004 0000101 0 00005 1 00110000 00110000} \\
   \\
   \texttt{1 0 1 2 4 2 3 2 4 3 2 4 265} @@latex:{\color{red}@@\texttt{0}@@latex:}@@ \texttt{5} @@latex:{\color{red}@@\texttt{1}@@latex:}@@ \texttt{0 0} \\
   \\
   \texttt{1 0 1 2 4 2 3 2 4 3 2 4 (11; 8) 0 0} \\
   \\
   @@latex:{\color{red}@@\texttt{1}@@latex:}@@ \texttt{0 1 2 4 2 3 2 4 3 2 4 4 2 3 2 4 3 2 4 4 2 3 0 0} \\
   \\
   Niech to będzie cały zdekodowany scanline
   RGBA. @@latex:{\color{red}@@\texttt{1}@@latex:}@@ oznacza rodzaj
   filtru. Wtedy żeby odzyskać dodajemy wartość z poprzedniego pixela. \\
   \texttt{0 1 2 4  2 3 2 4  3 2 4 4   2 3 2 4   3 2 4  4   2  3  0  0} \\
   \\
   \texttt{0 1 2 4  2 4 4 8  5 6 8 12  5 6 8 12  8 8 12 16  10 11 12 16} \\

** Zalecany algorytm
   + Kompresor kończy blok kiedy uznaje, że rozpoczęcie nowego bloku
     (z innym drzewem Huffmana) jest opłacalne, lub kiedy kończy mu
     się miejsca w buforze pamięci.
   + Zalecane użycie tablicy haszującej z dowiązaniami do szukania
     powtórzonych ciągów używając funkcji haszującej operujących na
     3-bajtowych sekwencjach.
   + Załóżmy że dostajemy na wejściu "XYZ" (te znaki nie muszą być
     różne).
     - Sprawdzamy hasz słowa "XYZ".
     - Jeśli nie mamy takiego w tablicy, to kompresor pisze literał
       "X" a następnie dodaje następny bajt "W" do aktualnego ciągu
       otrzymując "YZW".
     - Jeśli wystąpienie istnieje, kompresor sprawdza wszystkie ciągi
       znajdujące się w komórce haszującej się tak jak
       "XYZ". Wymierając najdłuższy pasujący ciąg.

** Zalecany algorytm
   + Przeszukiwanie list odbywa się od tych które wystąpiły ostatnio
     do tych, które wystąpiły najdawniej (mały dystans skoku przewaga
     podczas kodowania Huffmana).
   + Listy to zwykłe, jednostronne listy. Usuwanie wartości jest
     leniwe. Podczas przeszukiwania gdy kompresor natrafia na ciąg,
     który wystąpił dalej niż rozmiar okna, usuwa go wtedy.
   + Bardzo długie listy są ograniczone przez jakąś ustaloną stałą
     długość (one rosną dość szybko).
   + "Lazy match": załóżmy że mamy ciąg "XYZWABC". Może się okazać, że
     zamiast teraz kodować skok bardziej nam się opłaca zakodować
     literał "X" a następnie "YZWABC [następne bajty które pasują]".
     Kompresor może wyemitować skok, a następnie zrezygnować z niego
     kodując "X" a następnie lepszy skok.
   + Im bardziej zależy użytkownikowi na kompresji, tym więcej czasu
     jest poświęcene szukaniu najlepszego ciągu.

** Podsumowanie kompresji:
   + Mając już gotowy ciąg literaów i par oznaczająych kopię LZ
     liczymy wystąpienia i budujemy otpymalne drzewo Huffmana
     algorytmem zachłannym, albo decydujemy się użyć domyślnego drzewa
     Huffmana.
   + Następnie zapisujemy długości ciągów dla kolejnych elementów alfabetu.
   + Te długości kodujemy alfabetem \Sigma_{2} (tym $[0; 18]$).
   + Wysyłamy długości elementów \Sigma_{2}, ale tylko tyle ile potrzebujemy.
   + Dekoder rozszyfrowuje \Sigma_{2} a następnie drzwo Huffmana.
   + Następnie czyta resztę zakodowanej informacji albo dodajać bajty
     albo kopiując.


* Przeplot
** Adam7
*** Przeplot pozwala nam wysałać obraz tak, żeby dekodujący zobaczył go wcześniej, w mniejszej rozdzielczości.
*** PNG używa algorytmu ADAM7, który jest skuteczniejszy niż algorytm używany w GIF'ie
     + Więcej iteracji w dwóch wymiarach, a nie tylko w jednym
** Adam7
   Obraz \\
   \texttt{1 2} \\
   \texttt{3 3} \\

   Przechodzi na: \\
   \texttt{1 . 2 .} \\
   \texttt{. . . .} \\
   \texttt{3 . 3 .} \\
   \texttt{. . . .} \\

   A następnie: \\
   \texttt{1 4 2 4} \\
   \texttt{5 5 5 5} \\
   \texttt{3 4 3 4} \\
   \texttt{5 5 5 5} \\

** Adam7 lepiej niż w GIF'ie
  + W GIF'ie \texttt{1 2} zostałby zamieniony \texttt{1 . 2 .} a
    następnie wypełniony \texttt{1 3 2 4}.
  + Tylko wertykalnie w porównaniu do ADAM7.

** Adam7 (start)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-0.png]]

** Adam7 (etap 1)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-1.png]]

** Adam7 (etap 2)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-2.png]]

** Adam7 (etap 3)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-3.png]]

** Adam7 (etap 4)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-4.png]]

** Adam7 (etap 5)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-5.png]]

** Adam7 (etap 6)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-6.png]]

** Adam7 (etap 7)
#+ATTR_LATEX: :width 4cm
[[./images/interlace-7.png]]


* Podsumowanie
** Podsumowanie
   + Format PNG to prosty format - jego założenia to nie najbardziej
     efektywna kompresja, tylko przenośność i prostota.
   + Sercem kompresji jest bezstratny algorytm "kompresji ogólnej",
     nie zaprojektowany pod kodowanie bajtów obrazu.
   + Na jego skuteczność wpływają filtry które transforumją obraz do
     znacznie bardziej przystępnej postaci.
   + Znacznie lepsze efekty kompresji można osiągnąć stosując algorytm
     kompresji stratnej - np. JPG.
   + PNG jest jednak całkiem skuteczny na "typowych" obrazach -
     stopień kompresji pomiędzy $2.5$ a $3.5$.
   + Jest jednak ustandaryzowany, łatwo rozszeżalny, a do dekompresji
     można użyć bardzo popularnej biblioteki na dogodnej licencji.

** Referencje
  1. \scriptsize{T. Boutell}, \\
      \normalsize{"PNG (Portable Network Graphics) Specification"} \vspace{5pt}
  2. \scriptsize{L. Peter Deutsch}, \\
      \normalsize{"DEFLATE Compressed Data Format Specification (RFC 1951)"} \vspace{5pt}
  3. \scriptsize{L. Peter Deutsch, J-L. Gailly}, \\
      \normalsize{"ZLIB Compressed Data Format Specification"} \vspace{5pt}
  4. \scriptsize{Ziv J., Lempel A.}, \\
      \normalsize{"A Universal Algorithm for Sequential Data Compression"}

** Dziękuję za uwagę.
